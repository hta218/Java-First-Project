/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form_Presentation;

import DatabaseAccessObject_DAO.HoaDonDAO;
import DatabaseAccessObject_DAO.KhoDAO;
import DatabaseAccessObject_DAO.NhanVienDAO;
import DatabaseAccessObject_DAO.VaiTroDAO;
import Object_BusinessLogic.NhanVien;
import Object_BusinessLogic.VaiTro;
import java.awt.Component;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class FormNhanVien extends javax.swing.JFrame {

    DefaultTableModel tableModel = new DefaultTableModel();
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form FrmVaiTro
     */
    public FormNhanVien() throws ClassNotFoundException, SQLException {
        initComponents();
        loadDuLieuLenLuoi();
        loadCombobox_VaiTro();
        cbb_VaiTro.setSelectedItem(null);
        loadCombobox_VaiTro_Search();
        cbb_Search_VaiTro.setSelectedItem(null);
        lbl_ngaySinh_Hint.setVisible(false);
        lbl_sdt_Hint.setVisible(false);
        lbl_sdt_Search_Hint.setVisible(false);
    }

    private void loadDuLieuLenLuoi() throws ClassNotFoundException, SQLException {
        //nvởi tạo lại model, xóa hết cột cũ dòng cũ đi
        tableModel = new DefaultTableModel();
        //tạo cột
        tableModel.addColumn("Staff ID");
        tableModel.addColumn("Staff Name");
        tableModel.addColumn("Date Of Birth");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Address");
        tableModel.addColumn("Phone Number");
        tableModel.addColumn("Email");
        tableModel.addColumn("Position ID");
        tableModel.addColumn("Position Name");
        tableModel.addColumn("Account Name");
        tableModel.addColumn("Password");
        NhanVienDAO nhanVienDAO = new NhanVienDAO();
        //lấy ra toàn bộ vai trò
        List<NhanVien> nhanVienList = nhanVienDAO.selectAll();
        for (NhanVien nv : nhanVienList) {
            Vector vector = new Vector();
            vector.add(nv.getMaNhanVien());
            vector.add(nv.getHoTenNhanVien());
            vector.add(sdf.format(nv.getNgaySinh()));
            vector.add(nv.getGioiTinh().equals("Nam") ? "Nam" : "Nữ");
            vector.add(nv.getDiaChi());
            vector.add(nv.getSdt());
            vector.add(nv.getEmail());
            vector.add(nv.getMaVaiTro());
            vector.add(nv.getTenVaiTro());
            vector.add(nv.getTaiKhoan());
            vector.add(nv.getMatKhau());
            //tạo hàng
            tableModel.addRow(vector);
        }
        //đưa dữ liệu từ model vào bảng
        tab_NhanVien.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgGioiTinh = new javax.swing.ButtonGroup();
        bg_Search_gioiTinh = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_MaNhanVien = new javax.swing.JTextField();
        btnSua = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnXoaTrang = new javax.swing.JButton();
        txt_TenNhanVien = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbb_VaiTro = new javax.swing.JComboBox();
        txt_DiaChi = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_SDT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_Email = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        rbnNam = new javax.swing.JRadioButton();
        rbnNu = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        txt_TaiKhoan = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txt_Search_TenNhanVien = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txt_Search_sdt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cbb_Search_VaiTro = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        btnTimKiem = new javax.swing.JButton();
        rbn_SearchNam = new javax.swing.JRadioButton();
        rbn_SearchNu = new javax.swing.JRadioButton();
        btn_Search_Clear = new javax.swing.JButton();
        lbl_sdt_Search_Hint = new javax.swing.JLabel();
        btn_refresh_cbb_VaiTroSearch = new javax.swing.JButton();
        lbl_ngaySinh_Hint = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        date_ngaySinh = new com.toedter.calendar.JDateChooser();
        txt_MatKhau = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        lbl_sdt_Hint = new javax.swing.JLabel();
        btn_refresh_cbb_VaiTro = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab_NhanVien = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        btn_ListKH = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Staff ID*");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(40, 30, 110, 17);

        txt_MaNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_MaNhanVien);
        txt_MaNhanVien.setBounds(172, 27, 270, 30);

        btnSua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/system-software-update-icon.png"))); // NOI18N
        btnSua.setText("Update");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel1.add(btnSua);
        btnSua.setBounds(369, 350, 120, 43);

        btnThem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/profile-add-icon.png"))); // NOI18N
        btnThem.setText("Add");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel1.add(btnThem);
        btnThem.setBounds(209, 350, 120, 43);

        btnXoa.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/trash-icon.png"))); // NOI18N
        btnXoa.setText("Delete");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoa);
        btnXoa.setBounds(528, 350, 120, 43);

        btnXoaTrang.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnXoaTrang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Actions-edit-clear-icon.png"))); // NOI18N
        btnXoaTrang.setText("Clear");
        btnXoaTrang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaTrangActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoaTrang);
        btnXoaTrang.setBounds(688, 350, 120, 43);

        txt_TenNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_TenNhanVien);
        txt_TenNhanVien.setBounds(172, 72, 270, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Staff Name*");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(40, 75, 110, 17);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Position*");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(480, 79, 123, 17);

        cbb_VaiTro.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cbb_VaiTro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cbb_VaiTro);
        cbb_VaiTro.setBounds(610, 70, 170, 30);

        txt_DiaChi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_DiaChi);
        txt_DiaChi.setBounds(172, 295, 270, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Address");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 298, 50, 17);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Gender*");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(480, 30, 70, 22);

        txt_SDT.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_SDT);
        txt_SDT.setBounds(172, 187, 270, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Phone Number*");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(40, 193, 110, 17);

        txt_Email.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_Email);
        txt_Email.setBounds(172, 250, 270, 30);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("Email");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(40, 255, 60, 17);

        bgGioiTinh.add(rbnNam);
        rbnNam.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rbnNam.setText("Male");
        jPanel1.add(rbnNam);
        rbnNam.setBounds(610, 20, 63, 39);

        bgGioiTinh.add(rbnNu);
        rbnNu.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rbnNu.setText("Female");
        jPanel1.add(rbnNu);
        rbnNu.setBounds(700, 20, 80, 39);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Date Of Birth*");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(40, 125, 120, 17);

        txt_TaiKhoan.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_TaiKhoan);
        txt_TaiKhoan.setBounds(610, 120, 220, 30);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Account Name*");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(480, 126, 100, 17);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search"));
        jPanel3.setForeground(new java.awt.Color(0, 204, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("Staff Name");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 19, -1, -1));

        txt_Search_TenNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel3.add(txt_Search_TenNhanVien, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 16, 236, 30));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText("Staff Number");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 70, 107, -1));

        txt_Search_sdt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel3.add(txt_Search_sdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 64, 236, 30));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("Gender");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 133, 60, 22));

        cbb_Search_VaiTro.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cbb_Search_VaiTro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(cbb_Search_VaiTro, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 189, 161, 30));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel15.setText("Position");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 196, 123, -1));

        btnTimKiem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search-b-icon.png"))); // NOI18N
        btnTimKiem.setText("Search");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        jPanel3.add(btnTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, 43));

        bg_Search_gioiTinh.add(rbn_SearchNam);
        rbn_SearchNam.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rbn_SearchNam.setText("Male");
        jPanel3.add(rbn_SearchNam, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 126, 61, 37));

        bg_Search_gioiTinh.add(rbn_SearchNu);
        rbn_SearchNu.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rbn_SearchNu.setText("Female");
        jPanel3.add(rbn_SearchNu, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 126, 82, 37));

        btn_Search_Clear.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btn_Search_Clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Actions-edit-clear-icon.png"))); // NOI18N
        btn_Search_Clear.setText("Clear");
        btn_Search_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Search_ClearActionPerformed(evt);
            }
        });
        jPanel3.add(btn_Search_Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 250, 112, 43));

        lbl_sdt_Search_Hint.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lbl_sdt_Search_Hint.setForeground(new java.awt.Color(204, 0, 0));
        lbl_sdt_Search_Hint.setText(" Invalid!");
        jPanel3.add(lbl_sdt_Search_Hint, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 100, 100, 20));

        btn_refresh_cbb_VaiTroSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/system-software-update-icon.png"))); // NOI18N
        btn_refresh_cbb_VaiTroSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refresh_cbb_VaiTroSearchActionPerformed(evt);
            }
        });
        jPanel3.add(btn_refresh_cbb_VaiTroSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(333, 185, 42, 38));

        jPanel1.add(jPanel3);
        jPanel3.setBounds(860, 60, 390, 310);

        lbl_ngaySinh_Hint.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lbl_ngaySinh_Hint.setForeground(new java.awt.Color(204, 51, 0));
        lbl_ngaySinh_Hint.setText(" Invalid!");
        jPanel1.add(lbl_ngaySinh_Hint);
        lbl_ngaySinh_Hint.setBounds(172, 153, 130, 20);

        jLabel18.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel18.setText("(*) required fields");
        jPanel1.add(jLabel18);
        jLabel18.setBounds(40, 360, 113, 26);

        date_ngaySinh.setDateFormatString("dd, MMMMMMMMMMMM, yyyy");
        date_ngaySinh.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(date_ngaySinh);
        date_ngaySinh.setBounds(172, 120, 270, 30);

        txt_MatKhau.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txt_MatKhau);
        txt_MatKhau.setBounds(610, 187, 220, 30);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setText("Password*");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(480, 193, 100, 17);

        lbl_sdt_Hint.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lbl_sdt_Hint.setForeground(new java.awt.Color(204, 51, 0));
        lbl_sdt_Hint.setText(" Invalid!");
        jPanel1.add(lbl_sdt_Hint);
        lbl_sdt_Hint.setBounds(172, 220, 130, 20);

        btn_refresh_cbb_VaiTro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/system-software-update-icon.png"))); // NOI18N
        btn_refresh_cbb_VaiTro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refresh_cbb_VaiTroActionPerformed(evt);
            }
        });
        jPanel1.add(btn_refresh_cbb_VaiTro);
        btn_refresh_cbb_VaiTro.setBounds(790, 66, 42, 38);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/11111.jpg"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(6, 19, 1260, 402);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Staff List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        tab_NhanVien.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tab_NhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tab_NhanVien.getTableHeader().setReorderingAllowed(false);
        tab_NhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab_NhanVienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tab_NhanVien);
        if (tab_NhanVien.getColumnModel().getColumnCount() > 0) {
            tab_NhanVien.getColumnModel().getColumn(0).setResizable(false);
            tab_NhanVien.getColumnModel().getColumn(1).setResizable(false);
            tab_NhanVien.getColumnModel().getColumn(2).setResizable(false);
            tab_NhanVien.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1261, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        btn_ListKH.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btn_ListKH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Actions-view-calendar-list-icon.png"))); // NOI18N
        btn_ListKH.setText("List");
        btn_ListKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ListKHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_ListKH, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_ListKH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tab_NhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab_NhanVienMouseClicked
        try {
            lbl_ngaySinh_Hint.setVisible(false);
            lbl_sdt_Hint.setVisible(false);
            lbl_sdt_Search_Hint.setVisible(false);
            int row = tab_NhanVien.getSelectedRow();
            String maNhanVien = (String) tab_NhanVien.getValueAt(row, 0);
            String tenNV = (String) tab_NhanVien.getValueAt(row, 1);
            String ngaySinh = (String) tab_NhanVien.getValueAt(row, 2);
            String gioiTinh = (String) tab_NhanVien.getValueAt(row, 3);
            String diaChi = (String) tab_NhanVien.getValueAt(row, 4);
            Integer sdt = (Integer) tab_NhanVien.getValueAt(row, 5);
            String email = (String) tab_NhanVien.getValueAt(row, 6);
            Integer maVaiTro = (Integer) tab_NhanVien.getValueAt(row, 7);
            String taiKhoan = (String) tab_NhanVien.getValueAt(row, 9);
            String matKhau = (String) tab_NhanVien.getValueAt(row, 10);
            txt_MaNhanVien.setText(maNhanVien);
            txt_TenNhanVien.setText(tenNV);
            date_ngaySinh.setDate(sdf.parse(ngaySinh));
            if (gioiTinh.trim().equals("Nam")) {
                rbnNam.setSelected(true);
            } else {
                rbnNu.setSelected(true);
            }
            txt_DiaChi.setText(diaChi);
            txt_SDT.setText(sdt.toString());
            txt_Email.setText(email);
            txt_TaiKhoan.setText(taiKhoan);
            txt_MatKhau.setText(matKhau);
            VaiTroDAO vaiTroDAO = new VaiTroDAO();
            cbb_VaiTro.setSelectedItem(vaiTroDAO.getVaiTroByID(maVaiTro));
            txt_MaNhanVien.setEnabled(false);
            btnThem.setEnabled(false);
        } catch (ParseException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tab_NhanVienMouseClicked

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        xoaTrang();
        //nvởi tạo lại model, xóa hết cột cũ dòng cũ đi
        tableModel = new DefaultTableModel();
        //tạo cột
        tableModel.addColumn("Staff ID");
        tableModel.addColumn("Staff Name");
        tableModel.addColumn("Date Of Birth");
        tableModel.addColumn("Gender");
        tableModel.addColumn("Address");
        tableModel.addColumn("Phone Number");
        tableModel.addColumn("Email");
        tableModel.addColumn("Position ID");
        tableModel.addColumn("Position Name");
        tableModel.addColumn("Account Name");
        tableModel.addColumn("Password");
        NhanVienDAO nhanVienDAO = new NhanVienDAO();
        //lấy ra thông tin tìm kiếm
        NhanVien nv = new NhanVien();
        lbl_sdt_Search_Hint.setVisible(false);
        if (txt_Search_TenNhanVien.getText().trim().equals("") && rbn_SearchNam.isSelected() == false
                && rbn_SearchNu.isSelected() == false && cbb_Search_VaiTro.getSelectedItem() == null
                && txt_Search_sdt.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter information into the search box!");
            return;
        }
        if (!txt_Search_sdt.getText().trim().equals("")) {
            while (true) {
                try {
                    nv.setSdt(Integer.parseInt(txt_Search_sdt.getText().trim()));
                    lbl_sdt_Search_Hint.setVisible(false);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid!! \n"
                            + "Some fields are not allowed to contain letters or special characters");
                    lbl_sdt_Search_Hint.setVisible(true);
                    return;
                }
            }
        }
        nv.setHoTenNhanVien(txt_Search_TenNhanVien.getText().trim());
        if (rbn_SearchNam.isSelected()) {
            nv.setGioiTinh("Nam");
        }
        if (rbn_SearchNu.isSelected()) {
            nv.setGioiTinh("Nữ");
        }
        VaiTro vt = (VaiTro) cbb_Search_VaiTro.getSelectedItem();
        nv.setMaVaiTro(vt != null ? vt.getMaVaiTro() : null);
        List<NhanVien> nhanVienList = nhanVienDAO.search(nv);
        for (NhanVien nhanVien : nhanVienList) {
            Vector vector = new Vector();
            vector.add(nhanVien.getMaNhanVien());
            vector.add(nhanVien.getHoTenNhanVien());
            vector.add(sdf.format(nhanVien.getNgaySinh()));
            vector.add(nhanVien.getGioiTinh().equals("Nam") ? "Nam" : "Nữ");
            vector.add(nhanVien.getDiaChi());
            vector.add(nhanVien.getSdt());
            vector.add(nhanVien.getEmail());
            vector.add(nhanVien.getMaVaiTro());
            vector.add(nhanVien.getTenVaiTro());
            vector.add(nhanVien.getTaiKhoan());
            vector.add(nhanVien.getMatKhau());
            //tạo hàng
            tableModel.addRow(vector);
        }
        //đưa dữ liệu từ model vào bảng
        tab_NhanVien.setModel(tableModel);
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnXoaTrangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaTrangActionPerformed
        xoaTrang();
        xoaTrangSearch();
    }//GEN-LAST:event_btnXoaTrangActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int row = tab_NhanVien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select one Staff before deleting !");
            return;
        }
        String maNhanVien = (String) tab_NhanVien.getValueAt(row, 0);
        if (HoaDonDAO.getListMaNhanVien().contains(maNhanVien.trim()) || KhoDAO.getListMaNhanVien().contains(maNhanVien.trim())) {
            JOptionPane.showMessageDialog(this, "Unable to remove this Staff information\n"
                    + "Staff information is being used!");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete??", "Warning", OK_CANCEL_OPTION);
        //Nếu chọn Yes
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                NhanVienDAO nhanVienDAO = new NhanVienDAO();
                NhanVien nv = new NhanVien(maNhanVien);
                nhanVienDAO.delete(nv);
                xoaTrang();
                xoaTrangSearch();
                loadDuLieuLenLuoi();
                JOptionPane.showMessageDialog(this, "Staff information removed !");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        lbl_ngaySinh_Hint.setVisible(false);
        lbl_sdt_Hint.setVisible(false);
        try {
            String textOnJDateChooser = ((JTextField) date_ngaySinh.getDateEditor().getUiComponent()).getText();
            //kiêm tra các thông tin bắt buộc nhập là quyền và tên vai trò
            if (txt_MaNhanVien.getText().isEmpty() || txt_TenNhanVien.getText().isEmpty() || (rbnNam.isSelected() == false
                    && rbnNu.isSelected() == false) || txt_SDT.getText().isEmpty() || textOnJDateChooser.isEmpty()
                    || cbb_VaiTro.getSelectedItem() == null || txt_TaiKhoan.getText().isEmpty() || txt_MatKhau.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields(*) in the Information box");
                return;
            }
            if (date_ngaySinh.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Invalid!! \n"
                        + "Some fields are not allowed to contain letters or special characters");
                lbl_ngaySinh_Hint.setVisible(true);
                return;
            } else {
                lbl_ngaySinh_Hint.setVisible(false);
            }
            while (true) {
                try {
                    Integer.parseInt(txt_SDT.getText().trim());
                    lbl_sdt_Hint.setVisible(false);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid!! \n"
                            + "Some fields are not allowed to contain letters or special characters");
                    lbl_sdt_Hint.setVisible(true);
                    return;
                }
            }
            String gtinh = "Nữ";
            if (rbnNam.isSelected()) {
                gtinh = "Nam";
            }
            NhanVienDAO nhanVienDAO = new NhanVienDAO();
            if (nhanVienDAO.getListMaNhanVien().contains(txt_MaNhanVien.getText().trim().toUpperCase())) {
                JOptionPane.showMessageDialog(this, "Staff ID already exists!\n"
                        + "Re-Enter the Staff ID!!");
                txt_MaNhanVien.setText("");
                return;
            }
            if (kiemTraTaiKhoan_Insert(txt_TaiKhoan.getText())) {
                JOptionPane.showMessageDialog(this, "Duplicate Account Name!!");
                return;
            }
            //lấy giá trị nhập trên form truyền vào đôi tượng
            NhanVien nv = new NhanVien();
            nv.setMaNhanVien(txt_MaNhanVien.getText().trim().toUpperCase());
            nv.setHoTenNhanVien(txt_TenNhanVien.getText());
            nv.setNgaySinh(date_ngaySinh.getDate());
            nv.setDiaChi(txt_DiaChi.getText());
            nv.setSdt(Integer.parseInt(txt_SDT.getText()));
            nv.setGioiTinh(gtinh);
            nv.setEmail(txt_Email.getText());
            nv.setMaVaiTro(((VaiTro) cbb_VaiTro.getSelectedItem()).getMaVaiTro());
            nv.setTenVaiTro(((VaiTro) cbb_VaiTro.getSelectedItem()).getTenVaiTro());
            nv.setTaiKhoan(txt_TaiKhoan.getText().trim());
            nv.setMatKhau(txt_MatKhau.getText().trim());
            //thực hiện thêm vào DB
            nhanVienDAO.insert(nv);

            //reset form
            xoaTrang();
            xoaTrangSearch();
            //load lại dữ liệu lên lưới
            loadDuLieuLenLuoi();
            //nếu thành công thì thông báo
            JOptionPane.showMessageDialog(this, "Successfully add new Staffs !");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int row = tab_NhanVien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select one Staff before updating!");
            return;
        }
        lbl_ngaySinh_Hint.setVisible(false);
        lbl_sdt_Hint.setVisible(false);
        String textOnJDateChooser = ((JTextField) date_ngaySinh.getDateEditor().getUiComponent()).getText();
        try {
            //kiêm tra các thông tin bắt buộc nhập là quyền và tên vai trò
            if (txt_TenNhanVien.getText().isEmpty() || (rbnNam.isSelected() == false
                    && rbnNu.isSelected() == false) || txt_SDT.getText().isEmpty() || textOnJDateChooser.isEmpty()
                    || cbb_VaiTro.getSelectedItem() == null || txt_TaiKhoan.getText().isEmpty() || txt_MatKhau.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields(*) in the Information box");
                return;
            }
            if (date_ngaySinh.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Invalid!! \n"
                        + "Some fields are not allowed to contain letters or special characters");
                lbl_ngaySinh_Hint.setVisible(true);
                return;
            } else {
                lbl_ngaySinh_Hint.setVisible(false);
            }
            while (true) {
                try {
                    Integer.parseInt(txt_SDT.getText().trim());
                    lbl_sdt_Hint.setVisible(false);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid!! \n"
                            + "Some fields are not allowed to contain letters or special characters");
                    lbl_sdt_Hint.setVisible(true);
                    return;
                }
            }
            if (kiemTraTaiKhoan_Update(txt_TaiKhoan.getText())) {
                JOptionPane.showMessageDialog(this, "Duplicate Account Name!!");
                return;
            }
            if (soSanh(row)) {
                JOptionPane.showMessageDialog(this, "All of the informations are retainded!!");
                return;
            }
            String gtinh = "Nữ";
            if (rbnNam.isSelected()) {
                gtinh = "Nam";
            }
            NhanVienDAO nhanVienDAO = new NhanVienDAO();
            //lấy giá trị nhập trên form truyền vào đôi tượng
            NhanVien nv = new NhanVien();
            nv.setMaNhanVien(txt_MaNhanVien.getText().trim().toUpperCase());
            nv.setHoTenNhanVien(txt_TenNhanVien.getText());
            nv.setNgaySinh(date_ngaySinh.getDate());
            nv.setDiaChi(txt_DiaChi.getText());
            nv.setSdt(Integer.parseInt(txt_SDT.getText()));
            nv.setGioiTinh(gtinh);
            nv.setEmail(txt_Email.getText());
            nv.setMaVaiTro(((VaiTro) cbb_VaiTro.getSelectedItem()).getMaVaiTro());
            nv.setTenVaiTro(((VaiTro) cbb_VaiTro.getSelectedItem()).getTenVaiTro());
            nv.setTaiKhoan(txt_TaiKhoan.getText().trim());
            nv.setMatKhau(txt_MatKhau.getText().trim());
            //thực hiện thêm vào DB
            nhanVienDAO.update(nv);
            //nếu thành công thì thông báo
            JOptionPane.showMessageDialog(this, "Staff information updated successfully !");
            //reset form
            xoaTrang();
            xoaTrangSearch();
            //load lại dữ liệu lên lưới
            loadDuLieuLenLuoi();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSuaActionPerformed

    private void btn_Search_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Search_ClearActionPerformed
        // TODO add your handling code here:
        txt_Search_TenNhanVien.setText("");
        txt_Search_sdt.setText("");
        bg_Search_gioiTinh.clearSelection();
        cbb_Search_VaiTro.setSelectedItem(null);

    }//GEN-LAST:event_btn_Search_ClearActionPerformed

    private void btn_ListKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ListKHActionPerformed
        try {
            // TODO add your handling code here:
            loadDuLieuLenLuoi();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_ListKHActionPerformed

    private void btn_refresh_cbb_VaiTroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refresh_cbb_VaiTroActionPerformed
        // TODO add your handling code here:
        Object obj = cbb_VaiTro.getSelectedItem();
        loadCombobox_VaiTro();
        cbb_VaiTro.setSelectedItem(obj);
    }//GEN-LAST:event_btn_refresh_cbb_VaiTroActionPerformed

    private void btn_refresh_cbb_VaiTroSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refresh_cbb_VaiTroSearchActionPerformed
        // TODO add your handling code here:
        Object obj = cbb_Search_VaiTro.getSelectedItem();
        loadCombobox_VaiTro_Search();
        cbb_Search_VaiTro.setSelectedItem(obj);

    }//GEN-LAST:event_btn_refresh_cbb_VaiTroSearchActionPerformed

    private void xoaTrang() {
        txt_MaNhanVien.setText("");
        txt_MaNhanVien.setEnabled(true);
        txt_TenNhanVien.setText("");
        date_ngaySinh.setDate(null);
        txt_DiaChi.setText("");
        cbb_VaiTro.setSelectedItem(null);
        txt_SDT.setText("");
        txt_Email.setText("");
        txt_TaiKhoan.setText("");
        txt_MatKhau.setText("");
        bgGioiTinh.clearSelection();
        btnThem.setEnabled(true);
        tab_NhanVien.clearSelection();
        lbl_ngaySinh_Hint.setVisible(false);
        lbl_sdt_Hint.setVisible(false);
    }

    private void xoaTrangSearch() {
        txt_Search_TenNhanVien.setText("");
        txt_Search_sdt.setText("");
        bg_Search_gioiTinh.clearSelection();
        lbl_sdt_Search_Hint.setVisible(false);
        cbb_Search_VaiTro.setSelectedItem(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormNhanVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormNhanVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormNhanVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormNhanVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and dinvlay the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FormNhanVien().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FormNhanVien.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgGioiTinh;
    private javax.swing.ButtonGroup bg_Search_gioiTinh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaTrang;
    private javax.swing.JButton btn_ListKH;
    private javax.swing.JButton btn_Search_Clear;
    private javax.swing.JButton btn_refresh_cbb_VaiTro;
    private javax.swing.JButton btn_refresh_cbb_VaiTroSearch;
    private javax.swing.JComboBox cbb_Search_VaiTro;
    private javax.swing.JComboBox cbb_VaiTro;
    private com.toedter.calendar.JDateChooser date_ngaySinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_ngaySinh_Hint;
    private javax.swing.JLabel lbl_sdt_Hint;
    private javax.swing.JLabel lbl_sdt_Search_Hint;
    private javax.swing.JRadioButton rbnNam;
    private javax.swing.JRadioButton rbnNu;
    private javax.swing.JRadioButton rbn_SearchNam;
    private javax.swing.JRadioButton rbn_SearchNu;
    private javax.swing.JTable tab_NhanVien;
    private javax.swing.JTextField txt_DiaChi;
    private javax.swing.JTextField txt_Email;
    private javax.swing.JTextField txt_MaNhanVien;
    private javax.swing.JTextField txt_MatKhau;
    private javax.swing.JTextField txt_SDT;
    private javax.swing.JTextField txt_Search_TenNhanVien;
    private javax.swing.JTextField txt_Search_sdt;
    private javax.swing.JTextField txt_TaiKhoan;
    private javax.swing.JTextField txt_TenNhanVien;
    // End of variables declaration//GEN-END:variables

    private void loadCombobox_VaiTro() {
        VaiTroDAO vaiTroDAO = new VaiTroDAO();
        //lấy toàn bộ bảng nhà cung cấp
        List<VaiTro> vaiTroList = vaiTroDAO.selectAll();
        Vector v = new Vector(vaiTroList);
        //nvởi tạo dữ liệu cho combobox
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel(v);
        cbb_VaiTro.setModel(dcbm);
        //giúp tạo combobox hiển thị tên vai trò
        cbb_VaiTro.setRenderer(new ListCellRenderer() {
            DefaultListCellRenderer dlcr = new DefaultListCellRenderer();

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // gọi method giống hệt method cần viết, truyền vào tham số y như nguyên
                JLabel label = (JLabel) dlcr.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value != null) {
                    label.setText(((VaiTro) value).getTenVaiTro());
                }
                return label;
            }
        });
    }

    private void loadCombobox_VaiTro_Search() {
        VaiTroDAO vaiTroDAO = new VaiTroDAO();
        //lấy toàn bộ bảng nhà cung cấp
        List<VaiTro> NccList = vaiTroDAO.selectAll();
        Vector v = new Vector(NccList);
        //nvởi tạo dữ liệu cho combobox
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel(v);
        cbb_Search_VaiTro.setModel(dcbm);
        //giúp tạo combobox hiển thị tên vai trò
        cbb_Search_VaiTro.setRenderer(new ListCellRenderer() {
            DefaultListCellRenderer dlcr = new DefaultListCellRenderer();

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // gọi method giống hệt method cần viết, truyền vào tham số y như nguyên
                JLabel label = (JLabel) dlcr.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value != null) {
                    label.setText(((VaiTro) value).getTenVaiTro());
                }
                return label;
            }
        });
    }

    public boolean soSanh(int row) {
        String maNhanVien = (String) tab_NhanVien.getValueAt(row, 0);
        NhanVien nv = (new NhanVienDAO()).getNVByID(maNhanVien);
        String tenNV = txt_TenNhanVien.getText().trim();
        Date ngaySinh = date_ngaySinh.getDate() != null ? date_ngaySinh.getDate() : null;
        String gioiTinh = !rbnNam.isSelected() ? "Nữ" : "Nam";
        Integer sdt = txt_SDT.getText().trim().equals(nv.getSdt().toString())
                ? Integer.parseInt(txt_SDT.getText().trim()) : (new Random()).nextInt();
        String email = txt_Email.getText().trim();
        String diaChi = txt_DiaChi.getText().trim();
        Integer maVaiTro = ((VaiTro) cbb_VaiTro.getSelectedItem()).getMaVaiTro();
        String taiKhoan = txt_TaiKhoan.getText().trim();
        String matKhau = txt_MatKhau.getText().trim();
        if (nv.getHoTenNhanVien().equals(tenNV) && nv.getNgaySinh().equals(ngaySinh) && nv.getGioiTinh().equals(gioiTinh)
                && nv.getSdt().equals(sdt) && nv.getEmail().equals(email) && nv.getDiaChi().equals(diaChi)
                && nv.getMaVaiTro().equals(maVaiTro) && nv.getTaiKhoan().equals(taiKhoan) && nv.getMatKhau().equals(matKhau)) {
            return true;
        }
        return false;
    }

    public boolean kiemTraTaiKhoan_Update(String tenTaiKhoan) {
        List<NhanVien> listNV = (new NhanVienDAO()).selectAll();
        List<String> listTenTK = new ArrayList<>();
        for (NhanVien nv : listNV) {
            listTenTK.add(nv.getTaiKhoan().trim());
        }
        listTenTK.remove(tenTaiKhoan);
        if (listTenTK.contains(tenTaiKhoan.trim())) {
            return true;
        }
        return false;
    }
    public boolean kiemTraTaiKhoan_Insert(String tenTaiKhoan) {
        List<NhanVien> listNV = (new NhanVienDAO()).selectAll();
        List<String> listTenTK = new ArrayList<>();
        for (NhanVien nv : listNV) {
            listTenTK.add(nv.getTaiKhoan().trim());
        }
        if (listTenTK.contains(tenTaiKhoan.trim())) {
            return true;
        }
        return false;
    }
}
